package services;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.Stack;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.fasterxml.jackson.databind.ObjectMapper;

import dao.FreelancerResult;
import dao.Job;
import dao.Project;
import dao.ProjectResponse;
import dao.UserDetails;
import dao.UserProfile;
import dao.UserProjectDisplay;

/** This class holds all the business logic which is used by the controller in order to fetch useful data
 * @author Vaibhav, Felipe, Gagandeep, Gurpreet
 * @version 1.0
 * @since 1.0
*/
public class FreeLancelotService {
	
/** global stats string
 * @author Gurpreet Singh
 * @version 1.0
 * @since 1.0
*/
	public static String globalStr = "";
	
	
	
	/** This method counts the number of words in the preview description to calculate global word stats
	 * @author Gurpreet Singh
	 * @version 1.0
	 * @param cache is used to get all the preview_descriptions to calculate the global word stats using streams 
	 * @return it returns the map of each word and its count
     * @throws IOException it throws IOException
	 * @since 1.0
	*/
	public static CompletableFuture<HashMap<String, Integer>> globalWordStats(HashMap<String, List<ProjectResponse>> cache) throws IOException {
		CompletableFuture<HashMap<String, Integer>> future = new CompletableFuture<>();
		List<String> globalStatsResponse = cache.entrySet().stream()
				.map(x -> x.getValue().stream()
						.map(y -> y.getPrevDescriptor())
						.collect(Collectors.toList()))
				.map(x -> x.toString())
				.collect(Collectors.toList());
		
		globalStr = globalStatsResponse.toString();
		/*for (Entry<String, List<ProjectResponse>> data : cache.entrySet()) {
		    data.getValue().forEach(x -> {
		    	globalStr = globalStr + " " + x.getPrevDescriptor();
		    });
		}*/
		
		future = FreeLancelotService.wordStats(globalStr);
		globalStr = "";
		return future;
	}	
	
	/** This method counts the number of words in the preview description to calculate word stats of a project
	 * @author Gurpreet Singh
	 * @version 1.0
	 * @param prevDescriptor is used to get all the preview_descriptions to calculate the global word stats using streams 
	 * @return it returns the map of each word and its count of preview description
	 * @throws IOException it throws IOException
	 * @since 1.0
	*/
	public static CompletableFuture<HashMap<String, Integer>> wordStats(String prevDescriptor) throws IOException {
		CompletableFuture<HashMap<String, Integer>> future = new CompletableFuture<>();
		
		//prevDescriptor = prevDescriptor.replaceAll("[\\[\\](){},.]"," ");
		//prevDescriptor = prevDescriptor.replaceAll("[^a-zA-Z]"," ");
        //.map(x -> x.split("\\s+"))
		List<String> wordList = Stream.of(prevDescriptor)
        		.map(x->x.replaceAll("[^\\w]", " "))
				.map(x -> x.split(" "))
        		.flatMap(Arrays::stream)
        		.collect(Collectors.toList());
		
		//System.out.println("wordList :: " + wordList);
        
		Map<String, Integer > wordCounter = wordList.stream()
            .collect(Collectors.toMap(x -> x.toLowerCase(), x -> 1, Integer::sum));
		
		final LinkedHashMap<String, Integer> wordInDec = wordCounter.entrySet().stream()
				.sorted(Comparator.comparing(x -> x.getValue()))
				.sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
				.collect(Collectors.toMap(x -> x.getKey(), y -> y.getValue(), (a, b) -> a, LinkedHashMap::new));
        ((CompletableFuture<HashMap<String, Integer>>) future).complete((HashMap<String, Integer>) wordInDec);
		return future;
	}	
	
	/** This method is called by the controller to fetch all the latest active projects where the data is processed by streams
	 * @author Vaibhav, Felipe, Gagandeep, Gurpreet
	 * @param keyWord consist of string to be passed to the Freelancer API to fetch projects.
	 * @return it returns a list of active projects used by the front end generated by streams.
	 * @version 1.0
	 * @throws IOException it throws IOException
	 * @since 1.0
	*/

	public static CompletableFuture<List<ProjectResponse>>  streamProjects(String keyWord) throws IOException {
		return FreelancerAPIcallsService.getActiveProjects(keyWord).thenApplyAsync(
				projects -> {
					Stream<ProjectResponse> projRes = projects.stream()
							.map(p -> new ProjectResponse(p.getOwner_id(), p.getTime_submitted(),p.getTitle(), p.getProject_type(), convertJobDetails(p.getJobs()),p.getSeo_url(), p.getPreview_description()));
					return calculateFlesch(projRes);
				}
		);
	}
	
	public static List<ProjectResponse> convertProjects(ArrayList<Project> x) {
					Stream<ProjectResponse> projRes = x.stream()
							.map(p -> new ProjectResponse(p.getOwner_id(), p.getTime_submitted(),p.getTitle(), p.getProject_type(), convertJobDetails(p.getJobs()),p.getSeo_url(), p.getPreview_description()));
					return calculateFlesch(projRes);
				
	}
	
	/** This method is used to calculate edu level, flesh index and fkgl of latest active projects where the data is processed by streams
	 * @author Vaibhav Verma
	 * @param projRes is the stream of latest active projects
	 * @return it returns a list of active projects with all details used by the front end generated by streams.
	 * @version 1.0
	 * @since 1.0
	*/
	public static List<ProjectResponse> calculateFlesch(Stream<ProjectResponse> projRes) {
		return projRes.map(proj -> {
	        proj.setEdu_level(getEducationalLevel(proj.getPrevDescriptor()));
	        proj.setFlesch_index((int)getfleschIndex(proj.getPrevDescriptor()));
	        proj.setFkgl((int)getFKGL(proj.getPrevDescriptor()));
	        return proj;
	    }).limit(10)
		.collect(Collectors.toList());
	}

	/** This method is used to convert the Job array into a list of skills(string)
	 * @author Vaibhav, Felipe, Gagandeep, Gurpreet
	 * @param jobs is the arraylist of jobs fetched from Freelancer API.
	 * @return it returns the list of strings (skills) which is used by the project response.
	 * @version 1.0
	 * @since 1.0
	*/

	public static  List<String>  convertJobDetails(ArrayList<Job> jobs){
		List<String> skills = jobs.stream()
				.map(p -> p.getName())
				.collect(Collectors.toList());
		return skills;	
	}
	
	/** This method uses the preview_description of the project and returns its educational level
	 * @author Vaibhav Verma
	 * @version 1.0
	 * @param preview_description is the preview description of the project.
	 * @return it returns the educational level by running algorithms on preview description.
	 * @since 1.0
	*/
	public static String getEducationalLevel(String preview_description){
		int fleshIndex = (int)getfleschIndex(preview_description);
		return checkEducationalLevel(fleshIndex);
	}
	
	
	/** This method uses the preview_description of the project and returns its fleschIndex
	 * @author Vaibhav Verma
	 * @version 1.0
	 * @param preview_description is the preview description of the project.
	 * @return it returns the flesch index by running algorithms on preview description.
	 * @since 1.0
	*/
	public static double getfleschIndex(String preview_description) {
		double wordcount = wordCount(preview_description);
		double syllablecount = syllablesCount(preview_description);
		double sentencecount = sentenceCount(preview_description);
		if (preview_description == "" || wordcount == 0 ) {
			return 999;
		}
		return  206.835 - 84.6*(syllablecount/wordcount) - 1.015*(wordcount/sentencecount);
	}
	
	
	/** This method uses the preview_description of the project and returns its FKGL index
	 * @author Vaibhav Verma
	 * @version 1.0
	 * @param preview_description is the preview description of the project.
	 * @return it returns the fkgl index by running algorithms on preview description.
	 * @since 1.0
	*/
	public static double getFKGL(String preview_description) {
		double wordcount = wordCount(preview_description);
		double syllablecount = syllablesCount(preview_description);
		double sentencecount = sentenceCount(preview_description);
		if (preview_description == "" || wordcount == 0 ) {
			return 999;
		}
		return  0.39*(wordcount/sentencecount) + 11.8*(syllablecount/wordcount);
	}

	
	/** This method returns the educational level according to the fleschIndex
	 * @author Vaibhav Verma
	 * @version 1.0
	 * @param fleschIndex is the flesh index of the preview description.
	 * @return it returns the educational level according to the.
	 * @since 1.0
	*/
	public static String checkEducationalLevel(double fleschIndex) {
		
		if (fleschIndex <= 0) {
			return "Law School Graduate"; 
		} else if (fleschIndex <= 30 && fleschIndex >0 ) {
			return "College Graduate";
		} else if (fleschIndex <= 51 && fleschIndex >31 ) {
			return "Some College";
		} else if (fleschIndex <= 61 && fleschIndex >51 ) {
			return "High School";
		} else if (fleschIndex <= 66 && fleschIndex >61 ) {
			return "9th grade";
		} else if (fleschIndex <= 71 && fleschIndex >66 ) {
			return "8th grade";
		} else if (fleschIndex <= 81 && fleschIndex >71 ) {
			return "7th grade";
		} else if (fleschIndex <= 91 && fleschIndex >81 ) {
			return "6th grade";
		} else if (fleschIndex <= 100 && fleschIndex >91 ) {
			return "5th grade";
		} else {
			return "Early";
		}
	}
	
	
	/** This method counts the number of sentences in the preview description to calculate flesch index
	 * @author Vaibhav Verma
	 * @version 1.0
	 * @param preview_description is the preview description of the project.
	 * @return it returns the count of sentences in preview_description.
	 * @since 1.0
	*/
	public static double sentenceCount(String preview_description) {
		int sentenceCount = 0;
		String[] sentenceList = preview_description.split("[!?.:]+");
		sentenceCount =sentenceCount + sentenceList.length;
		return sentenceCount;
	}
	
	/** This method counts the number of syllables in the preview description to calculate flesch index
	 * @author Vaibhav Verma
	 * @version 1.0 
	 * @param preview_description is the preview description of the project.
	 * @return it returns the count of syllables in preview_description.
	 * @since 1.0
	*/
	public static double syllablesCount(String preview_description) {
		Pattern p = Pattern.compile("[aeiouy]+[^$e(,.:;!?)]");
		Matcher m = p.matcher(preview_description);
		int syllables = 0;
		while (m.find()){
		    syllables++;
		}
		return syllables;
	}
	
	/** This method counts the number of words in the preview description to calculate flesch index
	 * @author Vaibhav Verma
	 * @version 1.0
	 * @param preview_description is the preview description of the project.
	 * @return it returns the count of words in preview_description.
	 * @since 1.0
	*/
	public static double wordCount(String preview_description) {
		int count=0;
        for(int i=0;i<preview_description.length();i++)  
        {   
            if( ((i>0)&&(preview_description.charAt(i)!=' ')&&(preview_description.charAt(i-1)==' ')) || ((preview_description.charAt(0)!=' ')&&(i==0)) )  
                count++;  
        } 
        return count;
	}

	/**
	 * This method receives a specific skill as a parameter and returns 10 project which include this skill.
	 * @author Felipe Kosin Jorge
	 * @version 1.0
	 * @param skill is the project skill which will be present on the 10 next projects.
	 * @return A completableFuture of a Project Response, which contains at most 10 projects that include the specific skill passed
	 * @throws IOException if it occurs
	 */
	public static CompletableFuture<List<ProjectResponse>> skillsFilter(String skill) throws IOException{
		return FreelancerAPIcallsService.getActiveProjects(skill).thenApplyAsync(
				projects -> {
					Stream<ProjectResponse> projRes = projects.stream()
							.map(p -> new ProjectResponse(p.getOwner_id(), p.getTime_submitted(),p.getTitle(), p.getProject_type(), convertJobDetails(p.getJobs()),p.getSeo_url(), p.getPreview_description()))
							.filter(p -> p.skills.contains(skill));
							return calculateFlesch(projRes);
				}
						
		);
	}
	
	
	/** This method is used to display the user information
	 * @author Gagandeep Kaur
	 * @param owner_id of the owner
	 * @version 1.0
	 * @since 1.0
	 * @return returns user details
	 * @throws IOException if it occurs
	*/
	public static CompletableFuture<UserDetails> getUser(int owner_id) throws IOException{
		return FreelancerAPIcallsService.getUserDetails(owner_id).thenApplyAsync(
				owner -> {
					UserDetails user_details = new UserDetails(owner.getUsername(), owner.getPublic_name(),owner.getId(),owner.getAvatar_large(),owner.getDisplay_name(), owner.getRole(),owner.getChosen_role());
					return user_details;
				}	
		);
		}
	
	
	/** This method is used to Display the latest projects title using its owner_id
	 * @author Gagandeep Kaur
	 * @version 1.0
	 * @since 1.0
	 * @param owner_id of the owner
	 * @return returns user projects
	 * @throws IOException if it occurs
	*/
	public static CompletableFuture<List<UserProjectDisplay>> getUserProjects(int owner_id) throws IOException{
		return FreelancerAPIcallsService.getUserProjects(owner_id).thenApplyAsync(
				projects -> {
					List<UserProjectDisplay> user_proj_details = projects.stream()
							.map(user_p->new UserProjectDisplay(user_p.getTitle(), user_p.getType(),user_p.getOwner_id()))
									.collect(Collectors.toList());
					return user_proj_details;
				}	
		);
		}
	
}